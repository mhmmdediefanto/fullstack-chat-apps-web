// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  username      String          @unique
  fullname      String
  password      String
  contacts      Contact[]       @relation("UserContacts") // kontak yang saya miliki
  contactOf     Contact[]       @relation("ContactUsers") // kontak orang lain yang menambahkan saya
  messages      Message[]       @relation("UserMessages")
  groups        GroupMember[]
  refresh_token String?         @db.Text
  createdAt     DateTime        @default(now())
  MessageStatus MessageStatus[]
}

model Contact {
  id        Int      @id @default(autoincrement())
  user      User     @relation("UserContacts", fields: [userId], references: [id])  // pemilik kontak
  contact   User     @relation("ContactUsers", fields: [contactId], references: [id]) // kontak yang ditambahkan
  userId    Int
  contactId Int
  createdAt DateTime @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int?
  groupId    Int?
  content    String   @db.Text
  createdAt  DateTime @default(now())

  sender        User            @relation("UserMessages", fields: [senderId], references: [id]) // pengirim pesan
  group         Group?          @relation(fields: [groupId], references: [id]) // pesan grup
  MessageStatus MessageStatus[]
}

model MessageStatus {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  status    String // sent, delivered, seen
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Group {
  id        Int           @id @default(autoincrement())
  name      String
  members   GroupMember[]
  messages  Message[]
  createdAt DateTime      @default(now())
}

model GroupMember {
  id      Int    @id @default(autoincrement())
  userId  Int
  groupId Int
  role    String // admin/member
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])
}

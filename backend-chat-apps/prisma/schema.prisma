// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  username      String   @unique
  fullname      String
  password      String
  refresh_token String?  @db.Text
  createdAt     DateTime @default(now())

  // relasi
  conversations ConversationParticipant[]
  messages      Message[]
  contacts      Contact[]                 @relation("UserContacts")
  contactOf     Contact[]                 @relation("ContactUsers")
}

model Contact {
  id        Int           @id @default(autoincrement())
  userId    Int
  contactId Int
  status    ContactStatus @default(PENDING) // PENDING, ACCEPTED
  createdAt DateTime      @default(now())

  user    User @relation("UserContacts", fields: [userId], references: [id])
  contact User @relation("ContactUsers", fields: [contactId], references: [id])
}

model Conversation {
  id        Int              @id @default(autoincrement())
  type      ConversationType // PRIVATE atau GROUP
  name      String? // untuk group saja
  createdAt DateTime         @default(now())

  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             Int     @id @default(autoincrement())
  userId         Int // pengguna yang ikut dalam percakapan
  conversationId Int // percakapan yang diikuti
  role           String? // opsional: admin/member (untuk group)

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model Message {
  id             Int      @id @default(autoincrement())
  senderId       Int // pengirim pesan
  conversationId Int // percakapan tempat pesan dikirim
  content        String   @db.Text
  createdAt      DateTime @default(now())

  sender       User         @relation(fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

enum ConversationType {
  PRIVATE
  GROUP
}

enum ContactStatus {
  PENDING
  ACCEPTED
}
